name: "eLTER-RI RDF Generation & FAIR Publishing"

env:
  VOCAB_TYPE: "EnvThes"                # Change to "SO", "CL" or "EnvThes"
  SHEET_TAB_NAME: "EnvThes"           # Tab/sheet name inside the Google Spreadsheet

  METADATA_DESCRIPTION: >
    This vocabulary is automatically generated by the eLTER-RI "sheet2rdf" workflow.
    The workflow fetches content from a Google Sheet and ensures full FAIR compliance by:

      ‚Ä¢ Fetching the sheet as .xlsx and .csv files  
      ‚Ä¢ Converting the content into RDF (Turtle) format using xls2rdf  
      ‚Ä¢ Committing the generated files and logs to this repository  
      ‚Ä¢ Publishing the new RDF to the vocabulary server (Skosmos/Fuseki)  

    This workflow extends the original "excel2rdf" and is released under the Apache 2.0 License.  
    Reference: Nikola Vasiljevic (2021). sheet2rdf: First release (v0.1). Zenodo. https://doi.org/10.5281/zenodo.4432136  

    The listed Creators and Contributors refer to the authors of the vocabulary content itself, 
    not to the workflow automation process.

on:
  workflow_dispatch:

jobs:
  sheet2rdf:
    name: Sheet2RDF
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.11"

      - name: prepare
        shell: bash -l {0}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          conda create -n sheet2rdf python=3.11 pandas openpyxl
          conda activate sheet2rdf
          pip install gsheets

      - name: fetch
        shell: bash -l {0}
        env:
          FILE_NAME: ${{secrets.FILE_NAME}}
          GOOGLE_API_KEY: ${{secrets.GOOGLE_API_KEY}}
          SHEET_ID: ${{secrets.SHEET_ID}}
          SHEET_TAB_NAME: ${{ env.SHEET_TAB_NAME }}
        run: |
          conda activate sheet2rdf
          echo "üìÑ Fetching sheet '$SHEET_TAB_NAME' from Google Spreadsheet (ID: $SHEET_ID)..."
          python ./workflow/sheet2xls.py --sheet "$SHEET_TAB_NAME"

      - name: conversion-xls2rdf
        env:
          FILE_NAME: ${{secrets.FILE_NAME}}
          VOCAB_TYPE: ${{ env.VOCAB_TYPE }}
        run: |
          curl -L https://github.com/sparna-git/xls2rdf/releases/download/2.1.1/xls2rdf-app-2.1.1-onejar.jar -o xls2rdf.jar
          java -jar xls2rdf.jar convert -i $FILE_NAME.xlsx -o $FILE_NAME.ttl -l en

          # Convert VOCAB_TYPE to lowercase in bash
          VOCAB_LOWER=$(echo "$VOCAB_TYPE" | tr '[:upper:]' '[:lower:]')
          echo "<http://vocabs.lter-europe.net/${VOCAB_LOWER}/>" >> $FILE_NAME.ttl
          echo "   rdf:type skos:ConceptScheme" >> $FILE_NAME.ttl
          echo "   rdf:type owl:Ontology ." >> $FILE_NAME.ttl

          mv xls2rdf.log ./logs/
          rm -f xls2rdf.jar

      - name: commit-artifacts
        run: |
          git add .
          git diff-index --quiet HEAD || git commit -m "New ${{ env.VOCAB_TYPE }} vocabulary files generated (TTL, XLSX)"
          git push

      - name: extract-version
        id: version
        env:
          FILE_NAME: ${{secrets.FILE_NAME}}
        run: |
          VERSION=$(grep -oP '(?<=owl:versionInfo ")([^"]+)' $FILE_NAME.ttl | head -n 1)
          if [ -z "$VERSION" ]; then
            echo "‚ùå owl:versionInfo not found in TTL file!"
            exit 1
          fi
          echo "üîñ Found version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: extract-metadata-from-ttl
        id: metadata
        env:
          FILE_NAME: ${{secrets.FILE_NAME}}
          VOCAB_TYPE: ${{ env.VOCAB_TYPE }}
        run: |
          echo "üîç Extracting metadata from main ConceptScheme block in TTL..."

          VOCAB_LOWER=$(echo "$VOCAB_TYPE" | tr '[:upper:]' '[:lower:]')
          TTL_FILE="$FILE_NAME.ttl"

          if [ ! -f "$TTL_FILE" ]; then
            echo "‚ùå TTL file not found: $TTL_FILE"
            exit 1
          fi

          # Extract only the ConceptScheme metadata block ‚Äî stop before skos:hasTopConcept
          awk '
            BEGIN { capture=0 }
            /<http:\/\/vocabs\.lter-europe\.net\/'"$VOCAB_LOWER"'\/>[[:space:]]*a[[:space:]]*skos:ConceptScheme;/ { capture=1 }
            capture==1 { print }
            /skos:hasTopConcept/ { exit }
          ' "$TTL_FILE" > conceptscheme_block.ttl
          ls -l "$TTL_FILE" || echo "‚ö†Ô∏è TTL file not found in current directory: $(pwd)"

          if [ ! -s conceptscheme_block.ttl ]; then
            echo "‚ö†Ô∏è ConceptScheme block not found for ${VOCAB_TYPE} ‚Äî skipping metadata extraction."
            echo "creators=" >> $GITHUB_OUTPUT
            echo "contributors=" >> $GITHUB_OUTPUT
            echo "license=" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Extract RDF values (creators, contributors, license) from the isolated block
          CREATORS=$(grep -oP '(?<=dct:creator\s)[^;]+' conceptscheme_block.ttl | tr -d '<>' | tr '\n' ',' | sed 's/,$//')
          CONTRIBUTORS=$(grep -oP '(?<=dct:contributor\s)[^;]+' conceptscheme_block.ttl | tr -d '<>' | tr '\n' ',' | sed 's/,$//')
          LICENSE=$(grep -oP '(?<=dct:license\s)[^;]+' conceptscheme_block.ttl | tr -d '<>' | head -n 1)

          # Check if metadata values were found and print log feedback
          if [ -z "$CREATORS" ]; then
            echo "‚ö†Ô∏è No dct:creator found in ConceptScheme block."
          else
            echo "üßæ Found creators: $CREATORS"
          fi

          if [ -z "$CONTRIBUTORS" ]; then
            echo "‚ö†Ô∏è No dct:contributor found in ConceptScheme block."
          else
            echo "üßæ Found contributors: $CONTRIBUTORS"
          fi

          if [ -z "$LICENSE" ]; then
            echo "‚ö†Ô∏è No dct:license found in ConceptScheme block."
          else
            echo "üßæ Found license: $LICENSE"
          fi

          # Export metadata as GitHub Action outputs for use in subsequent steps (release, etc.)
          echo "creators=$CREATORS" >> $GITHUB_OUTPUT
          echo "contributors=$CONTRIBUTORS" >> $GITHUB_OUTPUT
          echo "license=$LICENSE" >> $GITHUB_OUTPUT

      - name: check-existing-tag
        id: checktag
        run: |
          TAG="v${{ steps.version.outputs.version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Tag $TAG already exists, skipping release."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: create-tag-and-release
        if: steps.checktag.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: "Release ${{ env.VOCAB_TYPE }} v${{ steps.version.outputs.version }}"
          body: |
            **Automated FAIR release for ${{ env.VOCAB_TYPE }} vocabulary**

            üß© **Description:**  
            ${{ env.METADATA_DESCRIPTION }}

            üë§ **Creators:** ${{ steps.metadata.outputs.creators }}
            ü§ù **Contributors:** ${{ steps.metadata.outputs.contributors }}
            üìú **License:** ${{ steps.metadata.outputs.license }}

            üìë **Source Google Sheet tab:** [${{ env.SHEET_TAB_NAME }}](https://docs.google.com/spreadsheets/d/1kf-ZDub9sLCY_vypolQFs_JNceyPFYi56vox4mo_nYw)

            üïì Published on: ${{ github.event.repository.updated_at }}
            üìÑ RDF source: ${{ secrets.FILE_NAME }}.ttl  
            üìä Data sources: ${{ secrets.FILE_NAME }}.xlsx

      - name: update-readme-version
        env:
          FILE_NAME: ${{secrets.FILE_NAME}}
        run: |
          if [ ! -f README.md ]; then
            echo "‚ö†Ô∏è README.md not found, skipping update."
            exit 0
          fi
          VERSION=$(grep -oP '(?<=owl:versionInfo ")([^"]+)' $FILE_NAME.ttl | head -n 1)
          if [ -z "$VERSION" ]; then
            echo "‚ö†Ô∏è No owl:versionInfo found, skipping README update."
            exit 0
          fi
          echo "üìù Updating README.md with version $VERSION"
          sed -i "s/\(Current version:\).*/\1 $VERSION/" README.md || echo "Current version: $VERSION" >> README.md
          git add README.md
          git diff-index --quiet HEAD || git commit -m "docs: update README with version $VERSION"
          git push
